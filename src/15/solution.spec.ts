import { readFile } from 'fs/promises';
import { parseRawData, push, run } from './solution';

describe('Day 15', () => {
    it('should parse example input', async () => {
        const input = await readFile('src/15/example_input.txt', 'utf8');
        const parsed = parseRawData(input);
        expect(parsed.grid.length).toBe(10);
        expect(parsed.grid[0].length).toBe(10);
        expect(parsed.instructions).toMatchObject(expect.arrayContaining(['<', 'v', 'v', '>', '^', '<']));
    });

    describe('push', () => {
        it('should move right without push', async () => {
            const result = push('>', [
                ['#', '#', '#', '#', '#', '#', '#', '#'],
                ['#', '.', '.', 'O', '.', 'O', '.', '#'],
                ['#', '#', '@', '.', 'O', '.', '.', '#'],
                ['#', '.', '.', '.', 'O', '.', '.', '#'],
                ['#', '.', '#', '.', 'O', '.', '.', '#'],
                ['#', '.', '.', '.', 'O', '.', '.', '#'],
                ['#', '.', '.', '.', '.', '.', '.', '#'],
                ['#', '#', '#', '#', '#', '#', '#', '#'],
            ]);
            expect(result).toMatchObject([
                ['#', '#', '#', '#', '#', '#', '#', '#'],
                ['#', '.', '.', 'O', '.', 'O', '.', '#'],
                ['#', '#', '.', '@', 'O', '.', '.', '#'],
                ['#', '.', '.', '.', 'O', '.', '.', '#'],
                ['#', '.', '#', '.', 'O', '.', '.', '#'],
                ['#', '.', '.', '.', 'O', '.', '.', '#'],
                ['#', '.', '.', '.', '.', '.', '.', '#'],
                ['#', '#', '#', '#', '#', '#', '#', '#'],
            ]);
        });

        it('should move left without push', async () => {
            const result = push('<', [
                ['#', '#', '#', '#', '#', '#', '#', '#'],
                ['#', '.', '.', 'O', '.', 'O', '.', '#'],
                ['#', '#', '.', '@', 'O', '.', '.', '#'],
                ['#', '.', '.', '.', 'O', '.', '.', '#'],
                ['#', '.', '#', '.', 'O', '.', '.', '#'],
                ['#', '.', '.', '.', 'O', '.', '.', '#'],
                ['#', '.', '.', '.', '.', '.', '.', '#'],
                ['#', '#', '#', '#', '#', '#', '#', '#'],
            ]);
            expect(result).toMatchObject([
                ['#', '#', '#', '#', '#', '#', '#', '#'],
                ['#', '.', '.', 'O', '.', 'O', '.', '#'],
                ['#', '#', '@', '.', 'O', '.', '.', '#'],
                ['#', '.', '.', '.', 'O', '.', '.', '#'],
                ['#', '.', '#', '.', 'O', '.', '.', '#'],
                ['#', '.', '.', '.', 'O', '.', '.', '#'],
                ['#', '.', '.', '.', '.', '.', '.', '#'],
                ['#', '#', '#', '#', '#', '#', '#', '#'],
            ]);
        });

        it('should move down without push', async () => {
            const result = push('v', [
                ['#', '#', '#', '#', '#', '#', '#', '#'],
                ['#', '.', '.', '@', '.', 'O', '.', '#'],
                ['#', '#', '.', '.', 'O', '.', '.', '#'],
                ['#', '.', '.', '.', 'O', '.', '.', '#'],
                ['#', '.', '#', '.', 'O', '.', '.', '#'],
                ['#', '.', '.', '.', 'O', '.', '.', '#'],
                ['#', '.', '.', '.', '.', '.', '.', '#'],
                ['#', '#', '#', '#', '#', '#', '#', '#'],
            ]);
            expect(result).toMatchObject([
                ['#', '#', '#', '#', '#', '#', '#', '#'],
                ['#', '.', '.', '.', '.', 'O', '.', '#'],
                ['#', '#', '.', '@', 'O', '.', '.', '#'],
                ['#', '.', '.', '.', 'O', '.', '.', '#'],
                ['#', '.', '#', '.', 'O', '.', '.', '#'],
                ['#', '.', '.', '.', 'O', '.', '.', '#'],
                ['#', '.', '.', '.', '.', '.', '.', '#'],
                ['#', '#', '#', '#', '#', '#', '#', '#'],
            ]);
        });

        it('should move up without push', async () => {
            const result = push('^', [
                ['#', '#', '#', '#', '#', '#', '#', '#'],
                ['#', '.', '.', '.', '.', 'O', '.', '#'],
                ['#', '#', '.', '@', 'O', '.', '.', '#'],
                ['#', '.', '.', '.', 'O', '.', '.', '#'],
                ['#', '.', '#', '.', 'O', '.', '.', '#'],
                ['#', '.', '.', '.', 'O', '.', '.', '#'],
                ['#', '.', '.', '.', '.', '.', '.', '#'],
                ['#', '#', '#', '#', '#', '#', '#', '#'],
            ]);
            expect(result).toMatchObject([
                ['#', '#', '#', '#', '#', '#', '#', '#'],
                ['#', '.', '.', '@', '.', 'O', '.', '#'],
                ['#', '#', '.', '.', 'O', '.', '.', '#'],
                ['#', '.', '.', '.', 'O', '.', '.', '#'],
                ['#', '.', '#', '.', 'O', '.', '.', '#'],
                ['#', '.', '.', '.', 'O', '.', '.', '#'],
                ['#', '.', '.', '.', '.', '.', '.', '#'],
                ['#', '#', '#', '#', '#', '#', '#', '#'],
            ]);
        });

        it('should move up with push', async () => {
            const result = push('^', [
                ['#', '#', '#', '#', '#', '#', '#', '#'],
                ['#', '.', '.', '.', '.', 'O', '.', '#'],
                ['#', '#', '.', '.', 'O', '.', '.', '#'],
                ['#', '.', '.', '.', '.', '.', '.', '#'],
                ['#', '.', '#', '.', 'O', '.', '.', '#'],
                ['#', '.', '.', '.', 'O', '.', '.', '#'],
                ['#', '.', '.', '.', '@', '.', '.', '#'],
                ['#', '#', '#', '#', '#', '#', '#', '#'],
            ]);
            expect(result).toMatchObject([
                ['#', '#', '#', '#', '#', '#', '#', '#'],
                ['#', '.', '.', '.', '.', 'O', '.', '#'],
                ['#', '#', '.', '.', 'O', '.', '.', '#'],
                ['#', '.', '.', '.', 'O', '.', '.', '#'],
                ['#', '.', '#', '.', 'O', '.', '.', '#'],
                ['#', '.', '.', '.', '@', '.', '.', '#'],
                ['#', '.', '.', '.', '.', '.', '.', '#'],
                ['#', '#', '#', '#', '#', '#', '#', '#'],
            ]);
        });
    });

    it('should find example solution', async () => {
        const input = await readFile('src/15/example_input.txt', 'utf8');
        const parsed = parseRawData(input);
        expect(run(parsed)).toBe(10092);
    });

    it('should find puzzle solution part 1', async () => {
        const input = await readFile('src/15/puzzle_input.txt', 'utf8');
        const parsed = parseRawData(input);
        expect(run(parsed)).toBe(1442192);
    });
});
